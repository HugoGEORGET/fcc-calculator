{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","previousResult","setPreviousResult","output","setOutput","handleClick","char","String","replace","test","includes","id","onClick","inputToCalculate","successiveOperators","exec","lastOperatorInSuccession","slice","evaluate","calculate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAuIeA,MAnIf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAE+BF,mBAAS,IAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGeJ,mBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAWPC,EAAc,SAACC,GACfL,IACFD,EAASC,GACTC,EAAkB,KAGpBF,GAAS,SAACD,GAAD,OACPQ,OAAOR,EAAQO,GACZE,QAAQ,OAAQ,KAChBA,QAAQ,KAAM,QAId,SAASC,KAAKH,GAWjBF,EAAUE,GAVK,MAATA,GAAgBH,EAAOO,SAAS,MACpCN,GACE,SAACD,GAAD,OACEI,OAAOJ,EAASG,GACbE,QAAQ,OAAQ,KAChBA,QAAQ,KAAM,KACdA,QAAQ,UAAW,QAiChC,OACE,iCACE,0BAASG,GAAG,MAAZ,UACE,qBAAKA,GAAG,QAAR,SACE,+BAAOZ,MAET,qBAAKY,GAAG,UAAR,SACE,+BAAOR,SAGX,0BAASQ,GAAG,UAAZ,UACE,wBAAQA,GAAG,QAAQC,QAtEX,WACZZ,EAAS,GACTE,EAAkB,IAClBE,EAAU,IAmEN,gBAGA,wBAAQO,GAAG,QAAQC,QAAS,kBAAMP,EAAY,IAA9C,eAGA,wBAAQM,GAAG,QAAQC,QAAS,kBAAMP,EAAY,IAA9C,eAGA,wBAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,IAA7C,eAGA,wBAAQM,GAAG,SAASC,QAAS,kBAAMP,EAAY,MAA/C,eAGA,wBAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,IAA7C,eAGA,wBAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,IAA7C,eAGA,wBAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,IAA5C,eAGA,wBAAQM,GAAG,WAAWC,QAAS,kBAAMP,EAAY,MAAjD,eAGA,wBAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,IAA5C,eAGA,wBAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,IAA5C,eAGA,wBAAQM,GAAG,QAAQC,QAAS,kBAAMP,EAAY,IAA9C,eAGA,wBAAQM,GAAG,WAAWC,QAAS,kBAAMP,EAAY,MAAjD,eAGA,wBAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,IAA7C,eAGA,wBAAQM,GAAG,UAAUC,QAAS,kBAAMP,EAAY,MAAhD,eAGA,wBAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,MAA5C,eAGA,wBAAQM,GAAG,SAASC,QAAS,kBApFjB,WAChB,IAAIC,EAAmBd,EAEvB,GAAI,SAASU,KAAKV,GAAQ,CAExB,IAAIe,EAAsB,SAASC,KAAKhB,GACpCiB,EAA2BF,EAAoB,GAAGG,OAAO,GAE5B,MAA7BD,IAGFF,EAAoB,GAAKA,EAAoB,GAAGG,MAAM,GAAI,GAC1DD,EAA2BF,EAAoB,GAAGG,OAAO,IAG3DJ,EAAmBA,EAAiBL,QAClCM,EAAoB,GACpBE,GAIJZ,EAAUc,YAASL,EAAiBL,QAAQ,IAAK,OACjDN,EAAkBgB,YAASL,EAAiBL,QAAQ,IAAK,OA8DlBW,IAAnC,sBCnHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5014a4b9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { evaluate } from \"mathjs\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(0);\r\n  const [previousResult, setPreviousResult] = useState(\"\");\r\n  const [output, setOutput] = useState(0);\r\n\r\n  const clear = () => {\r\n    setInput(0);\r\n    setPreviousResult(\"\");\r\n    setOutput(0);\r\n  };\r\n\r\n  const handleClick = (char) => {\r\n    if (previousResult) {\r\n      setInput(previousResult);\r\n      setPreviousResult(\"\");\r\n    }\r\n\r\n    setInput((input) =>\r\n      String(input + char)\r\n        .replace(/^00+/, \"0\")\r\n        .replace(\"..\", \".\")\r\n    );\r\n\r\n    // !(char === \".\" && output.includes(\".\"))\r\n    if (!/[+/x-]/.test(char)) {\r\n      if (!(char === \".\" && output.includes(\".\"))) {\r\n        setOutput(\r\n          (output) =>\r\n            String(output + char)\r\n              .replace(/^00+/, \"0\")\r\n              .replace(\"..\", \".\")\r\n              .replace(/^[+/x-]/, \"\") // remove any non-digit at the beginning of output\r\n        );\r\n      }\r\n    } else {\r\n      setOutput(char);\r\n    }\r\n  };\r\n\r\n  const calculate = () => {\r\n    let inputToCalculate = input;\r\n\r\n    if (/\\D{2,}/.test(input)) {\r\n      // successive operators\r\n      let successiveOperators = /\\D{2,}/.exec(input);\r\n      let lastOperatorInSuccession = successiveOperators[0].slice(-1);\r\n\r\n      if (lastOperatorInSuccession === \"-\") {\r\n        // successive operators with - as last\r\n        // we must keep it to calculate the next number as negative\r\n        successiveOperators[0] = successiveOperators[0].slice(0, -1);\r\n        lastOperatorInSuccession = successiveOperators[0].slice(-1);\r\n      }\r\n\r\n      inputToCalculate = inputToCalculate.replace(\r\n        successiveOperators[0],\r\n        lastOperatorInSuccession\r\n      );\r\n    }\r\n\r\n    setOutput(evaluate(inputToCalculate.replace(\"x\", \"*\")));\r\n    setPreviousResult(evaluate(inputToCalculate.replace(\"x\", \"*\")));\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <section id=\"top\">\r\n        <div id=\"input\">\r\n          <code>{input}</code>\r\n        </div>\r\n        <div id=\"display\">\r\n          <code>{output}</code>\r\n        </div>\r\n      </section>\r\n      <section id=\"buttons\">\r\n        <button id=\"clear\" onClick={clear}>\r\n          AC\r\n        </button>\r\n        <button id=\"seven\" onClick={() => handleClick(7)}>\r\n          7\r\n        </button>\r\n        <button id=\"eight\" onClick={() => handleClick(8)}>\r\n          8\r\n        </button>\r\n        <button id=\"nine\" onClick={() => handleClick(9)}>\r\n          9\r\n        </button>\r\n        <button id=\"divide\" onClick={() => handleClick(\"/\")}>\r\n          /\r\n        </button>\r\n        <button id=\"four\" onClick={() => handleClick(4)}>\r\n          4\r\n        </button>\r\n        <button id=\"five\" onClick={() => handleClick(5)}>\r\n          5\r\n        </button>\r\n        <button id=\"six\" onClick={() => handleClick(6)}>\r\n          6\r\n        </button>\r\n        <button id=\"multiply\" onClick={() => handleClick(\"x\")}>\r\n          x\r\n        </button>\r\n        <button id=\"one\" onClick={() => handleClick(1)}>\r\n          1\r\n        </button>\r\n        <button id=\"two\" onClick={() => handleClick(2)}>\r\n          2\r\n        </button>\r\n        <button id=\"three\" onClick={() => handleClick(3)}>\r\n          3\r\n        </button>\r\n        <button id=\"subtract\" onClick={() => handleClick(\"-\")}>\r\n          -\r\n        </button>\r\n        <button id=\"zero\" onClick={() => handleClick(0)}>\r\n          0\r\n        </button>\r\n        <button id=\"decimal\" onClick={() => handleClick(\".\")}>\r\n          .\r\n        </button>\r\n        <button id=\"add\" onClick={() => handleClick(\"+\")}>\r\n          +\r\n        </button>\r\n        <button id=\"equals\" onClick={() => calculate()}>\r\n          =\r\n        </button>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}