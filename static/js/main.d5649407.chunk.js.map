{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","previousResult","setPreviousResult","output","setOutput","handleClick","char","String","replace","test","includes","id","onClick","inputToCalculate","successiveOperators","exec","lastOperatorInSuccession","slice","evaluate","calculate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAuIeA,MAnIf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAE+BF,mBAAS,IAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGeJ,mBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAWb,SAASC,EAAYC,GACfL,IACFD,EAASC,GACTC,EAAkB,KAGpBF,GAAS,SAAAD,GAAK,OACZQ,OAAOR,EAAQO,GACZE,QAAQ,OAAQ,KAChBA,QAAQ,KAAM,QAId,SAASC,KAAKH,GAWjBF,EAAUE,GAVK,MAATA,GAAgBH,EAAOO,SAAS,MACpCN,GACE,SAAAD,GAAM,OACJI,OAAOJ,EAASG,GACbE,QAAQ,OAAQ,KAChBA,QAAQ,KAAM,KACdA,QAAQ,UAAW,OAiChC,OACE,8BACE,6BAASG,GAAG,OACV,yBAAKA,GAAG,SACN,8BAAOZ,IAET,yBAAKY,GAAG,WACN,8BAAOR,KAGX,6BAASQ,GAAG,WACV,4BAAQA,GAAG,QAAQC,QAtEzB,WACEZ,EAAS,GACTE,EAAkB,IAClBE,EAAU,KAmEN,MAGA,4BAAQO,GAAG,SAASC,QAAS,kBAAMP,EAAY,OAA/C,KAGA,4BAAQM,GAAG,QAAQC,QAAS,kBAAMP,EAAY,KAA9C,KAGA,4BAAQM,GAAG,QAAQC,QAAS,kBAAMP,EAAY,KAA9C,KAGA,4BAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,KAA7C,KAGA,4BAAQM,GAAG,WAAWC,QAAS,kBAAMP,EAAY,OAAjD,KAGA,4BAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,KAA7C,KAGA,4BAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,KAA7C,KAGA,4BAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,KAA5C,KAGA,4BAAQM,GAAG,WAAWC,QAAS,kBAAMP,EAAY,OAAjD,KAGA,4BAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,KAA5C,KAGA,4BAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,KAA5C,KAGA,4BAAQM,GAAG,QAAQC,QAAS,kBAAMP,EAAY,KAA9C,KAGA,4BAAQM,GAAG,MAAMC,QAAS,kBAAMP,EAAY,OAA5C,KAGA,4BAAQM,GAAG,OAAOC,QAAS,kBAAMP,EAAY,KAA7C,KAGA,4BAAQM,GAAG,UAAUC,QAAS,kBAAMP,EAAY,OAAhD,KAGA,4BAAQM,GAAG,SAASC,QAAS,kBApFnC,WACE,IAAIC,EAAmBd,EAEvB,GAAI,SAASU,KAAKV,GAAQ,CAExB,IAAIe,EAAsB,SAASC,KAAKhB,GACpCiB,EAA2BF,EAAoB,GAAGG,OAAO,GAE5B,MAA7BD,IAGFF,EAAoB,GAAKA,EAAoB,GAAGG,MAAM,GAAI,GAC1DD,EAA2BF,EAAoB,GAAGG,OAAO,IAG3DJ,EAAmBA,EAAiBL,QAClCM,EAAoB,GACpBE,GAIJZ,EAAUc,YAASL,EAAiBL,QAAQ,IAAK,OACjDN,EAAkBgB,YAASL,EAAiBL,QAAQ,IAAK,OA8DlBW,KAAnC,QCnHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d5649407.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { evaluate } from \"mathjs\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(0);\n  const [previousResult, setPreviousResult] = useState(\"\");\n  const [output, setOutput] = useState(0);\n\n  function clear() {\n    setInput(0);\n    setPreviousResult(\"\");\n    setOutput(0);\n  }\n\n  function handleClick(char) {\n    if (previousResult) {\n      setInput(previousResult);\n      setPreviousResult(\"\");\n    }\n\n    setInput(input =>\n      String(input + char)\n        .replace(/^00+/, \"0\")\n        .replace(\"..\", \".\")\n    );\n\n    // !(char === \".\" && output.includes(\".\"))\n    if (!/[+/x-]/.test(char)) {\n      if (!(char === \".\" && output.includes(\".\"))) {\n        setOutput(\n          output =>\n            String(output + char)\n              .replace(/^00+/, \"0\")\n              .replace(\"..\", \".\")\n              .replace(/^[+/x-]/, \"\") // remove any non-digit at the beginning of output\n        );\n      }\n    } else {\n      setOutput(char);\n    }\n  }\n\n  function calculate() {\n    let inputToCalculate = input;\n\n    if (/\\D{2,}/.test(input)) {\n      // successive operators\n      let successiveOperators = /\\D{2,}/.exec(input);\n      let lastOperatorInSuccession = successiveOperators[0].slice(-1);\n\n      if (lastOperatorInSuccession === \"-\") {\n        // successive operators with - as last\n        // we must keep it to calculate the next number as negative\n        successiveOperators[0] = successiveOperators[0].slice(0, -1);\n        lastOperatorInSuccession = successiveOperators[0].slice(-1);\n      }\n\n      inputToCalculate = inputToCalculate.replace(\n        successiveOperators[0],\n        lastOperatorInSuccession\n      );\n    }\n\n    setOutput(evaluate(inputToCalculate.replace(\"x\", \"*\")));\n    setPreviousResult(evaluate(inputToCalculate.replace(\"x\", \"*\")));\n  }\n\n  return (\n    <main>\n      <section id=\"top\">\n        <div id=\"input\">\n          <code>{input}</code>\n        </div>\n        <div id=\"display\">\n          <code>{output}</code>\n        </div>\n      </section>\n      <section id=\"buttons\">\n        <button id=\"clear\" onClick={clear}>\n          AC\n        </button>\n        <button id=\"divide\" onClick={() => handleClick(\"/\")}>\n          /\n        </button>\n        <button id=\"seven\" onClick={() => handleClick(7)}>\n          7\n        </button>\n        <button id=\"eight\" onClick={() => handleClick(8)}>\n          8\n        </button>\n        <button id=\"nine\" onClick={() => handleClick(9)}>\n          9\n        </button>\n        <button id=\"multiply\" onClick={() => handleClick(\"x\")}>\n          x\n        </button>\n        <button id=\"four\" onClick={() => handleClick(4)}>\n          4\n        </button>\n        <button id=\"five\" onClick={() => handleClick(5)}>\n          5\n        </button>\n        <button id=\"six\" onClick={() => handleClick(6)}>\n          6\n        </button>\n        <button id=\"subtract\" onClick={() => handleClick(\"-\")}>\n          -\n        </button>\n        <button id=\"one\" onClick={() => handleClick(1)}>\n          1\n        </button>\n        <button id=\"two\" onClick={() => handleClick(2)}>\n          2\n        </button>\n        <button id=\"three\" onClick={() => handleClick(3)}>\n          3\n        </button>\n        <button id=\"add\" onClick={() => handleClick(\"+\")}>\n          +\n        </button>\n        <button id=\"zero\" onClick={() => handleClick(0)}>\n          0\n        </button>\n        <button id=\"decimal\" onClick={() => handleClick(\".\")}>\n          .\n        </button>\n        <button id=\"equals\" onClick={() => calculate()}>\n          =\n        </button>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}